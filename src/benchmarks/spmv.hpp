#ifndef __BENCH_BENCHMARKS_SPMV_HPP
#define __BENCH_BENCHMARKS_SPMV_HPP

#include "../benchmarkbase.hpp"

#include <memory>
#include <vector>

namespace benchmarks {

/**
 * This benchmark multiplies a sparse matrix in ellpackr format with a vector.
 */
class Spmv : public BenchmarkBase {
private:

    std::shared_ptr<cl::Buffer> _inputValueBufferCMP = nullptr;
    std::shared_ptr<cl::Buffer> _inputValueBufferRMP = nullptr;
    std::shared_ptr<cl::Buffer> _inputColumnsBufferCMP = nullptr;
    std::shared_ptr<cl::Buffer> _inputColumnsBufferRMP = nullptr;
    std::shared_ptr<cl::Buffer> _inputRowLengthsBuffer = nullptr;
    std::shared_ptr<cl::Buffer> _inputVectorBuffer = nullptr;
    std::shared_ptr<cl::Buffer> _outputVectorBuffer = nullptr;
    std::shared_ptr<cl::Kernel> _ellpackKernel = nullptr;
    std::shared_ptr<cl::Kernel> _ellpackRowKernel = nullptr;
    std::shared_ptr<cl::Program> _program = nullptr;

    int _maxRowLength = -1;
    int _numberOfRows = -1;

    /**
     * Initialize a sparse matrix with random values.
     */
    template <typename TItem>
    void InitMatrixRowMajor(std::vector<TItem>& values, std::vector<int>& columnIds, 
                            std::vector<int>& rowDelimiters, std::vector<int>& rowLengths);

    /**
     * Convert the data generated by InitMatrixRowMajor to a padded row major representation.
     * (required for _ellpackRowKernel tests)
     */
    template <typename TItem>
    void ConvertToPaddedRowMajor(std::vector<TItem>& values, std::vector<int>& columnIds, 
                        std::vector<int>& rowDelimiters, std::vector<int>& rowLengths,
                        std::vector<TItem>& valuesPadded, std::vector<int>& columnIdsPadded, int maxRowLength);

    /**
     * Convert from padded row-major to padded column major row layout.
     * (required for _ellpackKernel tests)
     */
    template <typename TItem>
    void ConvertToPaddedColumnMajor(std::vector<TItem>& valuesPadded, std::vector<int>& columnIdsPadded,
                        std::vector<TItem>& valuesColumnMajorPadded, std::vector<int>& columnIdsColumnMajorPadded,
                        int maxRowLength);

    /**
     * Initialize the input vector
     */
    template <typename TItem>
    void InitVector(TItem *values, int n);

    /**
     * Compile kernels, call functions to initialize buffers and copy the generated data to the device.
     */
    template <typename TItem>
    int InitContext();

    /**
     * Setting the kernel arguments.
     */
    void SetKernelArguments();

    /**
     * Call kernels and create statistics.
     */
    template <typename TItem>
    void RunInternal();

    /**
     * Release all buffers, kernels and the program instance.
     */
    void Cleanup();

public:
    explicit Spmv(std::shared_ptr<ComputeController> controller);

    virtual ~Spmv();

    /**
     * Call all correct functions in the right order.
     * Execute test for single- and double-precision floating point data.
     */
    void Run();
};

}

#endif // __BENCH_BENCHMARKS_SPMV_HPP
